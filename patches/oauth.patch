diff --git a/core/trino-main/src/main/java/io/trino/server/security/oauth2/OidcDiscovery.java b/core/trino-main/src/main/java/io/trino/server/security/oauth2/OidcDiscovery.java
index d0e23338dd..5fb60b731b 100644
--- a/core/trino-main/src/main/java/io/trino/server/security/oauth2/OidcDiscovery.java
+++ b/core/trino-main/src/main/java/io/trino/server/security/oauth2/OidcDiscovery.java
@@ -37,7 +37,6 @@ import static io.airlift.http.client.HttpStatus.REQUEST_TIMEOUT;
 import static io.airlift.http.client.HttpStatus.TOO_MANY_REQUESTS;
 import static io.trino.server.security.oauth2.StaticOAuth2ServerConfiguration.ACCESS_TOKEN_ISSUER;
 import static io.trino.server.security.oauth2.StaticOAuth2ServerConfiguration.AUTH_URL;
-import static io.trino.server.security.oauth2.StaticOAuth2ServerConfiguration.END_SESSION_URL;
 import static io.trino.server.security.oauth2.StaticOAuth2ServerConfiguration.JWKS_URL;
 import static io.trino.server.security.oauth2.StaticOAuth2ServerConfiguration.TOKEN_URL;
 import static io.trino.server.security.oauth2.StaticOAuth2ServerConfiguration.USERINFO_URL;
@@ -115,7 +114,7 @@ public class OidcDiscovery
             else {
                 userinfoEndpoint = Optional.empty();
             }
-            Optional<URI> endSessionEndpoint = Optional.of(getRequiredField("end_session_endpoint", metadata.getEndSessionEndpointURI(), END_SESSION_URL, Optional.empty()));
+            Optional<URI> endSessionEndpoint = Optional.ofNullable(metadata.getEndSessionEndpointURI());
             return new OAuth2ServerConfig(
                     // AD FS server can include "access_token_issuer" field in OpenID Provider Metadata.
                     // It's not a part of the OIDC standard thus have to be handled separately.
diff --git a/core/trino-main/src/test/java/io/trino/server/security/oauth2/TestOidcDiscovery.java b/core/trino-main/src/test/java/io/trino/server/security/oauth2/TestOidcDiscovery.java
index ee2871dcf2..fa88e4140c 100644
--- a/core/trino-main/src/test/java/io/trino/server/security/oauth2/TestOidcDiscovery.java
+++ b/core/trino-main/src/test/java/io/trino/server/security/oauth2/TestOidcDiscovery.java
@@ -52,28 +52,31 @@ public class TestOidcDiscovery
     public void testStaticConfiguration()
             throws Exception
     {
-        testStaticConfiguration(Optional.empty(), Optional.empty());
-        testStaticConfiguration(Optional.of("/access-token-issuer"), Optional.of("/userinfo"));
+        testStaticConfiguration(Optional.empty(), Optional.empty(), Optional.empty());
+        testStaticConfiguration(Optional.of("/access-token-issuer"), Optional.of("/userinfo"), Optional.empty());
+        testStaticConfiguration(Optional.empty(), Optional.empty(), Optional.of("/connect/logout"));
+        testStaticConfiguration(Optional.of("/access-token-issuer"), Optional.of("/userinfo"), Optional.of("/connect/logout"));
     }
 
-    private void testStaticConfiguration(Optional<String> accessTokenPath, Optional<String> userinfoPath)
+    private void testStaticConfiguration(Optional<String> accessTokenPath, Optional<String> userinfoPath, Optional<String> endSessionPath)
             throws Exception
     {
         try (MetadataServer metadataServer = new MetadataServer(ImmutableMap.of("/jwks.json", "jwk/jwk-public.json"))) {
             URI issuer = metadataServer.getBaseUrl();
             Optional<URI> accessTokenIssuer = accessTokenPath.map(issuer::resolve);
             Optional<URI> userinfoUrl = userinfoPath.map(issuer::resolve);
+            Optional<URI> endSessionUrl = endSessionPath.map(issuer::resolve);
             ImmutableMap.Builder<String, String> properties = ImmutableMap.<String, String>builder()
                     .put("http-server.authentication.oauth2.issuer", metadataServer.getBaseUrl().toString())
                     .put("http-server.authentication.oauth2.oidc.discovery", "false")
                     .put("http-server.authentication.oauth2.auth-url", issuer.resolve("/connect/authorize").toString())
                     .put("http-server.authentication.oauth2.token-url", issuer.resolve("/connect/token").toString())
-                    .put("http-server.authentication.oauth2.jwks-url", issuer.resolve("/jwks.json").toString())
-                    .put("http-server.authentication.oauth2.end-session-url", issuer.resolve("/connect/logout").toString());
+                    .put("http-server.authentication.oauth2.jwks-url", issuer.resolve("/jwks.json").toString());
             accessTokenIssuer.map(URI::toString).ifPresent(uri -> properties.put("http-server.authentication.oauth2.access-token-issuer", uri));
             userinfoUrl.map(URI::toString).ifPresent(uri -> properties.put("http-server.authentication.oauth2.userinfo-url", uri));
+            endSessionUrl.map(URI::toString).ifPresent(uri -> properties.put("http-server.authentication.oauth2.end-session-url", uri));
             try (TestingTrinoServer server = createServer(properties.buildOrThrow())) {
-                assertConfiguration(server, issuer, accessTokenIssuer.map(issuer::resolve), userinfoUrl.map(issuer::resolve));
+                assertConfiguration(server, issuer, accessTokenIssuer.map(issuer::resolve), userinfoUrl.map(issuer::resolve), endSessionUrl.map(issuer::resolve));
             }
         }
     }
@@ -82,12 +85,25 @@ public class TestOidcDiscovery
     public void testOidcDiscovery()
             throws Exception
     {
-        testOidcDiscovery("openid-configuration.json", Optional.empty(), Optional.of("/connect/userinfo"));
-        testOidcDiscovery("openid-configuration-without-userinfo.json", Optional.empty(), Optional.empty());
-        testOidcDiscovery("openid-configuration-with-access-token-issuer.json", Optional.of("http://access-token-issuer.com/adfs/services/trust"), Optional.of("/connect/userinfo"));
+        testOidcDiscovery("openid-configuration.json",
+                Optional.empty(),
+                Optional.of("/connect/userinfo"),
+                Optional.of("/connect/end_session"));
+        testOidcDiscovery("openid-configuration-without-userinfo.json",
+                Optional.empty(),
+                Optional.empty(),
+                Optional.of("/connect/end_session"));
+        testOidcDiscovery("openid-configuration-with-access-token-issuer.json",
+                Optional.of("http://access-token-issuer.com/adfs/services/trust"),
+                Optional.of("/connect/userinfo"),
+                Optional.of("/adfs/oauth2/logout"));
+        testOidcDiscovery("openid-configuration-without-end-session-url.json",
+                Optional.empty(),
+                Optional.of("/connect/userinfo"),
+                Optional.empty());
     }
 
-    private void testOidcDiscovery(String configuration, Optional<String> accessTokenIssuer, Optional<String> userinfoUrl)
+    private void testOidcDiscovery(String configuration, Optional<String> accessTokenIssuer, Optional<String> userinfoUrl, Optional<String> endSessionUrl)
             throws Exception
     {
         try (MetadataServer metadataServer = new MetadataServer(
@@ -101,7 +117,7 @@ public class TestOidcDiscovery
                                 .put("http-server.authentication.oauth2.oidc.discovery", "true")
                                 .buildOrThrow())) {
             URI issuer = metadataServer.getBaseUrl();
-            assertConfiguration(server, issuer, accessTokenIssuer.map(issuer::resolve), userinfoUrl.map(issuer::resolve));
+            assertConfiguration(server, issuer, accessTokenIssuer.map(issuer::resolve), userinfoUrl.map(issuer::resolve), endSessionUrl.map(issuer::resolve));
         }
     }
 
@@ -159,7 +175,7 @@ public class TestOidcDiscovery
                                 .put("http-server.authentication.oauth2.oidc.discovery.timeout", "10s")
                                 .buildOrThrow())) {
             URI issuer = metadataServer.getBaseUrl();
-            assertConfiguration(server, issuer, Optional.empty(), Optional.of(issuer.resolve("/connect/userinfo")));
+            assertConfiguration(server, issuer, Optional.empty(), Optional.of(issuer.resolve("/connect/userinfo")), Optional.of(issuer.resolve("/connect/end_session")));
         }
     }
 
@@ -200,7 +216,7 @@ public class TestOidcDiscovery
                                 .put("http-server.authentication.oauth2.oidc.use-userinfo-endpoint", "false")
                                 .buildOrThrow())) {
             URI issuer = metadataServer.getBaseUrl();
-            assertConfiguration(server, issuer, Optional.empty(), Optional.empty());
+            assertConfiguration(server, issuer, Optional.empty(), Optional.empty(), Optional.of(issuer.resolve("/connect/end_session")));
         }
     }
 
@@ -240,7 +256,7 @@ public class TestOidcDiscovery
         }
     }
 
-    private static void assertConfiguration(TestingTrinoServer server, URI issuer, Optional<URI> accessTokenIssuer, Optional<URI> userinfoUrl)
+    private static void assertConfiguration(TestingTrinoServer server, URI issuer, Optional<URI> accessTokenIssuer, Optional<URI> userinfoUrl, Optional<URI> endSessionUrl)
     {
         assertComponents(server);
         OAuth2ServerConfig config = server.getInstance(Key.get(OAuth2ServerConfigProvider.class)).get();
@@ -249,6 +265,7 @@ public class TestOidcDiscovery
         assertThat(config.tokenUrl()).isEqualTo(issuer.resolve("/connect/token"));
         assertThat(config.jwksUrl()).isEqualTo(issuer.resolve("/jwks.json"));
         assertThat(config.userinfoUrl()).isEqualTo(userinfoUrl);
+        assertThat(config.endSessionUrl()).isEqualTo(endSessionUrl);
     }
 
     private static void assertComponents(TestingTrinoServer server)
